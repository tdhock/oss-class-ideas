** My practical definition

Continuous Integration (CI) tools allow you to test your code after every push to GitHub. Testing includes unit tests, code coverage, performance tests, etc.

CI is especially useful with [[https://en.wikipedia.org/wiki/Test-driven_development][Test-driven development]], which means you first push some tests, you get a failing build, then you push code until the tests pass, then you merge with master. Examples 
- [[https://github.com/tdhock/WeightedROC/pull/4][A WeightedROC PR]]
- [[https://github.com/tdhock/penaltyLearning/pull/4][A penaltyLearning PR]] with a first commit with a failing test that eventually gets fixed and merged.
- [[https://github.com/tdhock/animint/pull/165][An animint PR]] with a first commit that has a test with a data viz that fails to render correctly.

** Wikipedia definition (more theoretical)
- [[https://en.wikipedia.org/w/index.php?title=Continuous_integration&oldid=861935587][Wikipedia]] defines
  continuous integration as "the practice of merging all developer working copies to a shared mainline several times a day."
- "Continuous integration – the practice of frequently integrating one's new or changed code with the existing code repository – should occur frequently enough that no intervening window remains between commit and build, and such that no errors can arise without developers noticing them and correcting them immediately"
- "Normal practice is to trigger these builds by every commit to a repository, rather than a periodically scheduled build"
- Maintain a code repository: "the system should be buildable from a fresh checkout" in practice this means from git/github.
- Automate the build: "A single command should have the capability of building the system"
  - for R packages this is "R CMD build"
  - for many projects this is "make"
- Make the build self-testing: "all tests should run to confirm that it behaves as the developers expect"
- Everyone commits to master every day: "By committing regularly, every committer can reduce the number of conflicting changes." This is true but every day is a bit much -- in practice we often create branches and pull requests which are not merged with master every day. However the "PR" travis tests attempt a merge with master before testing, which hopefully will let you know if there is a conflicting change on your branch.
- Keep the build fast: "The build needs to complete rapidly, so that if there is a problem with integration, it is quickly identified." tests must finish relatively quickly for your package to be accepted on the central R package distribution network (CRAN).
- Everyone can see the results of the latest build: "It should be easy to find out whether the build breaks and, if so, who made the relevant change and what that change was" absolutely.
- Automate deployment: "write a script to deploy the application to a live test server that everyone can look at" after the build finishes.
- in my opinion the major benefit is: "Immediate feedback on system-wide impact of local changes"

** Examples

- [[https://github.com/tdhock/animint2/pull/17][A PR to animint2]] that is easy to understand.
- [[https://github.com/tdhock/directlabels/pull/17][A PR to directlabels last week]]. Note red X and green checkmark.
- [[https://github.com/Rdatatable/data.table/pull/3093][A PR to data.table]] which is currently failing due to lack of code coverage.
- [[https://github.com/pandas-dev/pandas/pull/11386][My PR for named capture in pandas]]. Note that they use Continuous Deployment of their documentation. "only last thing: http://pandas-docs.github.io/pandas-docs-travis/ will have the built docs (may take a bit of time as Travis is sometimes queued). This builds all docs & doc-strings. Have a look and pls issue a followup-PR if anything needs clarification / formatting"
- Use common sense -- don't always trust the CI build/test result. [[https://github.com/tdhock/animint2/pull/23#partial-pull-merging][A PR to animint2]] from my GSOC2018 student Vivek. The last commit only changes the NEWS file, so we know the red X failing build is actually a false negative. (problem with travis / build system)

** Services

Different CI providers give you different amount of services for free. 

I have used
- [[https://travis-ci.org/][Travis]] -- sample config file [[https://github.com/tdhock/animint/blob/master/.travis.yml][.travis.yml]]
- [[https://app.wercker.com][Wercker]] -- sample config file [[https://github.com/tdhock/animint/blob/master/wercker.yml][wercker.yml]]

I have not used
- [[https://www.appveyor.com/pricing/][AppVeyor]] (windows support)
- [[https://circleci.com/pricing/][CircleCI]] (mac support)
- [[https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/?nav=min][Azure DevOps]]

** Exercises

- Take one of my repos, e.g. [[https://github.com/tdhock/WeightedROC][WeightedROC]], fork it, set up another CI service. Hint: .travis.yml has support for "language: r" which essentially runs "R CMD check" on the command line -- in my WeightedROC repo you can run "bash [[https://github.com/tdhock/WeightedROC/blob/master/build.sh][build.sh]]" to do the essentially the same checks in the other CI service.
- Setup a github repo for [[https://github.com/rstats-gsoc/gsoc2018/wiki/Segmentor3IsBack][Segmentor3IsBack]], with TravisCI for GNU/Linux testing, Appveyor for windows testing and Coveralls for code coverage.
- Try test-driven development for the [[https://github.com/tdhock/oss-class-ideas][quadratic problem solver in R code]] project that I proposed. Begin by creating a PR with at least two tests that use the qp.labels function with known inputs and outputs. Pushing that test in a new PR should result in a passing green build. Now remove the dependency on quadprog from DESCRIPTION and NAMESPACE -- you should get a failing red build. Code the R version of the solver so that you get a passing green build.
